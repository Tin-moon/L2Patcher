import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;

/**
 * Created with IntelliJ IDEA.
 * User: Eugene Chipachenko
 * Date: 10.05.2014
 * Time: 23:09
 */
public class Patcher
{
  private static final char client_key[] = {
          0x39, 0x37, 0x64, 0x66, 0x33, 0x39, 0x38, 0x34, 0x37, 0x32, 0x64, 0x64, 0x66, 0x37, 0x33, 0x37,// 97df398472ddf737
          0x65, 0x66, 0x30, 0x61, 0x30, 0x63, 0x64, 0x31, 0x37, 0x65, 0x38, 0x64, 0x31, 0x37, 0x32, 0x66,// ef0a0cd17e8d172f
          0x30, 0x66, 0x65, 0x66, 0x31, 0x36, 0x36, 0x31, 0x61, 0x33, 0x38, 0x61, 0x38, 0x61, 0x65, 0x31,// 0fef1661a38a8ae1
          0x64, 0x36, 0x65, 0x38, 0x32, 0x39, 0x62, 0x63, 0x31, 0x63, 0x36, 0x65, 0x34, 0x63, 0x33, 0x63,// d6e829bc1c6e4c3c
          0x66, 0x63, 0x31, 0x39, 0x32, 0x39, 0x32, 0x64, 0x64, 0x61, 0x39, 0x65, 0x66, 0x39, 0x30, 0x31,// fc19292dda9ef901
          0x37, 0x35, 0x65, 0x34, 0x36, 0x65, 0x37, 0x33, 0x39, 0x34, 0x61, 0x31, 0x38, 0x38, 0x35, 0x30,// 75e46e7394a18850
          0x62, 0x36, 0x34, 0x31, 0x37, 0x64, 0x30, 0x33, 0x62, 0x65, 0x36, 0x65, 0x65, 0x61, 0x32, 0x37,// b6417d03be6eea27
          0x34, 0x64, 0x33, 0x65, 0x64, 0x31, 0x64, 0x64, 0x65, 0x35, 0x62, 0x35, 0x64, 0x37, 0x62, 0x64,// 4d3ed1dde5b5d7bd
          0x65, 0x37, 0x32, 0x63, 0x63, 0x30, 0x61, 0x30, 0x62, 0x37, 0x31, 0x64, 0x30, 0x33, 0x36, 0x30,// e72cc0a0b71d0360
          0x38, 0x36, 0x35, 0x35, 0x36, 0x33, 0x33, 0x38, 0x38, 0x31, 0x37, 0x39, 0x33, 0x61, 0x30, 0x32,// 8655633881793a02
          0x63, 0x39, 0x61, 0x36, 0x37, 0x64, 0x39, 0x65, 0x66, 0x32, 0x62, 0x34, 0x35, 0x65, 0x62, 0x37,// c9a67d9ef2b45eb7
          0x63, 0x30, 0x38, 0x64, 0x34, 0x62, 0x65, 0x33, 0x32, 0x39, 0x30, 0x38, 0x33, 0x63, 0x65, 0x34,// c08d4be329083ce4
          0x35, 0x30, 0x65, 0x36, 0x38, 0x66, 0x37, 0x38, 0x36, 0x37, 0x62, 0x36, 0x37, 0x34, 0x39, 0x33,// 50e68f7867b67493
          0x31, 0x34, 0x64, 0x34, 0x30, 0x35, 0x31, 0x31, 0x64, 0x30, 0x39, 0x62, 0x63, 0x35, 0x37, 0x34,// 14d40511d09bc574
          0x34, 0x35, 0x35, 0x31, 0x62, 0x61, 0x61, 0x38, 0x36, 0x61, 0x38, 0x39, 0x64, 0x63, 0x33, 0x38,// 4551baa86a89dc38
          0x31, 0x32, 0x33, 0x64, 0x63, 0x31, 0x36, 0x36, 0x38, 0x66, 0x64, 0x37, 0x32, 0x64, 0x38, 0x33,// 123dc1668fd72d83
          0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x35, 0x00, 0x00, 0x00, 0x00,// ....00000035....
  };

  private static final char enc_dec_key[] = {
          0x37, 0x35, 0x62, 0x34, 0x64, 0x36, 0x64, 0x65, 0x35, 0x63, 0x30, 0x31, 0x36, 0x35, 0x34, 0x34,// 75b4d6de5c016544
          0x30, 0x36, 0x38, 0x61, 0x31, 0x61, 0x63, 0x66, 0x31, 0x32, 0x35, 0x38, 0x36, 0x39, 0x66, 0x34,// 068a1acf125869f4
          0x33, 0x64, 0x32, 0x65, 0x30, 0x39, 0x66, 0x63, 0x35, 0x35, 0x62, 0x38, 0x62, 0x31, 0x65, 0x32,// 3d2e09fc55b8b1e2
          0x38, 0x39, 0x35, 0x35, 0x36, 0x64, 0x61, 0x66, 0x39, 0x62, 0x38, 0x37, 0x35, 0x37, 0x36, 0x33,// 89556daf9b875763
          0x35, 0x35, 0x39, 0x33, 0x34, 0x34, 0x36, 0x32, 0x38, 0x38, 0x62, 0x33, 0x36, 0x35, 0x33, 0x64,// 5593446288b3653d
          0x61, 0x31, 0x63, 0x65, 0x39, 0x31, 0x63, 0x38, 0x37, 0x62, 0x62, 0x31, 0x61, 0x35, 0x63, 0x31,// a1ce91c87bb1a5c1
          0x38, 0x66, 0x31, 0x36, 0x33, 0x32, 0x33, 0x34, 0x39, 0x35, 0x63, 0x35, 0x35, 0x64, 0x37, 0x64,// 8f16323495c55d7d
          0x37, 0x32, 0x63, 0x30, 0x38, 0x39, 0x30, 0x61, 0x38, 0x33, 0x66, 0x36, 0x39, 0x62, 0x66, 0x64,// 72c0890a83f69bfd
          0x31, 0x66, 0x64, 0x39, 0x34, 0x33, 0x34, 0x65, 0x62, 0x31, 0x63, 0x30, 0x32, 0x66, 0x33, 0x65,// 1fd9434eb1c02f3e
          0x34, 0x36, 0x37, 0x39, 0x65, 0x64, 0x66, 0x61, 0x34, 0x33, 0x33, 0x30, 0x39, 0x33, 0x31, 0x39,// 4679edfa43309319
          0x30, 0x37, 0x30, 0x31, 0x32, 0x39, 0x63, 0x32, 0x36, 0x37, 0x63, 0x38, 0x35, 0x36, 0x30, 0x34,// 070129c267c85604
          0x64, 0x38, 0x37, 0x62, 0x62, 0x36, 0x35, 0x62, 0x61, 0x65, 0x32, 0x30, 0x35, 0x64, 0x65, 0x33,// d87bb65bae205de3
          0x37, 0x30, 0x37, 0x61, 0x66, 0x31, 0x64, 0x32, 0x31, 0x30, 0x38, 0x38, 0x38, 0x31, 0x61, 0x62,// 707af1d2108881ab
          0x62, 0x35, 0x36, 0x37, 0x63, 0x33, 0x62, 0x33, 0x64, 0x30, 0x36, 0x39, 0x61, 0x65, 0x36, 0x37,// b567c3b3d069ae67
          0x63, 0x33, 0x61, 0x34, 0x63, 0x36, 0x61, 0x33, 0x61, 0x61, 0x39, 0x33, 0x64, 0x32, 0x36, 0x34,// c3a4c6a3aa93d264
          0x31, 0x33, 0x64, 0x34, 0x63, 0x36, 0x36, 0x30, 0x39, 0x34, 0x61, 0x65, 0x32, 0x30, 0x33, 0x39,// 13d4c66094ae2039
          0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x64, 0x00, 0x00, 0x00, 0x00,// ....0000001d....
  };

  public static void main( String[] args ) throws IOException
  {
    File f = new File( "l2.exe" );
    File o = new File( "l2_fixed.exe" );
    o.createNewFile();

    RandomAccessFile raf = new RandomAccessFile( f, "r" );

    ByteBuffer byteBuffer = ByteBuffer.allocate( (int) f.length() );
    raf.getChannel().read( byteBuffer );
    raf.close();

    byteBuffer.flip();
    int limit = byteBuffer.limit();
    int idx = findArray( byteBuffer.array(), client_key );

    byteBuffer.position( idx );

    for( char c : enc_dec_key )
    {
      byteBuffer.put( (byte) c );
    }

    byteBuffer.position( limit );
    byteBuffer.flip();

    RandomAccessFile rafn = new RandomAccessFile( o, "rw" );
    rafn.getChannel().write( byteBuffer );
    rafn.close();
  }

  public static int findArray( byte[] largeArray, char[] subArray )
  {

    //If any of the arrays is empty then not found
    if( largeArray.length == 0 || subArray.length == 0 )
    {
      return -1;
    }

    // If subarray is larger than large array then not found
    if( subArray.length > largeArray.length )
    {
      return -1;
    }

    for( int i = 0; i < largeArray.length; i++ )
    {
      // Check if the next element of large array is the same as the first element of subarray
      if( largeArray[ i ] == subArray[ 0 ] )
      {

        boolean subArrayFound = true;
        for( int j = 0; j < subArray.length; j++ )
        {
          //If outside of large array or elements not equal then leave the loop
          if( largeArray.length <= i + j || subArray[ j ] != largeArray[ i + j ] )
          {
            subArrayFound = false;
            break;
          }
        }

        // Sub array found - return its index
        if( subArrayFound )
        {
          return i;
        }
      }
    }

    //Return default value
    return -1;
  }
}
